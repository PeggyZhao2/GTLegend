#include "graphics.h"
#include "globals.h"
#include "sprite.h"

//#include "main.cpp"

//int NPC_pixel[11*11] = {
//0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
//0x000000, 0x000000, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x000000, 0x000000, 
//0x000000, 0x000000, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0xdee8f7, 0x1c6df0, 0x1c6df0, 0xc6e34e, 0x000000, 
//0xc9d4c6, 0x000000, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0xc6e34e, 0xc6e34e, 
//0xc9d4c6, 0xc9d4c6, 0xc9d4c6, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x000000, 0x000000, 
//0x000000, 0xc9d4c6, 0xc9d4c6, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x000000, 0x000000, 0x000000, 
//0x000000, 0x000000, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x000000, 0x000000, 0x000000, 
//0x000000, 0x000000, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x000000, 0x000000, 
//0x000000, 0x000000, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x000000, 0x000000, 0x000000, 
//0x000000, 0x000000, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x1c6df0, 0x000000, 0x000000, 
//0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
//};
//
//int NPC_2_pixel[2][121] = {
//{
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xffa71121, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xffa71121, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xffa71121, 0xff000000, 0xffa71121, 0xffa71121, 0xffa71121, 0xff000000, 0xffa71121, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xff000000, 0xff000000, 0xff000000, 0xffa71121, 0xff000000, 0xff000000, 0xff000000, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xffa71121, 0xff000000, 0xffa71121, 0xffa71121, 0xffa71121, 0xff000000, 0xffa71121, 0xffa71121, 0x00000000, 
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffa71121, 0xffa71121, 0xffa71121, 0x00000000, 0x00000000, 0x00000000, 0x00000000
//},
//{
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0x00000000, 0x00000000, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0x00000000, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0x00000000, 0x00000000, 
//0x00000000, 0xfff7f2f3, 0xfff7f2f3, 0xff000000, 0xff000000, 0xfff7f2f3, 0xff000000, 0xff000000, 0xfff7f2f3, 0xfff7f2f3, 0x00000000, 
//0x00000000, 0xfff7f2f3, 0xfff7f2f3, 0xff000000, 0xff000000, 0xfff7f2f3, 0xff000000, 0xff000000, 0xfff7f2f3, 0xfff7f2f3, 0x00000000, 
//0x00000000, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0x00000000, 
//0x00000000, 0xfff7f2f3, 0xfff7f2f3, 0xff0505f6, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xff0505f6, 0xfff7f2f3, 0xfff7f2f3, 0x00000000, 
//0x00000000, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xff0505f6, 0xff0505f6, 0xff0505f6, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0x00000000, 
//0x00000000, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0x00000000, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0xfff7f2f3, 0x00000000, 
//0x00000000, 0x00000000, 0xfff7f2f3, 0x00000000, 0x00000000, 0x00000000, 0xfff7f2f3, 0x00000000, 0x00000000, 0xfff7f2f3, 0x00000000
//}
//};
//
//
//int treasure_pixel[11*11] = {
//{
//0x00000000, 0x00000000, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0x00000000, 0x00000000, 
//0x00000000, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0x00000000, 
//0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 
//0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 
//0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 
//0x00000000, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0x00000000, 
//0x00000000, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0x00000000, 
//0x00000000, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0x00000000, 
//0x00000000, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0x00000000, 
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
//
//};
//
//int player_pixel[2][121] = {
//{
//0x00000000, 0x00000000, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0x00000000, 0x00000000, 
//0x00000000, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0x00000000, 
//0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 
//0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 
//0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 
//0x00000000, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0x00000000, 
//0x00000000, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0x00000000, 
//0x00000000, 0xff07ccf2, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff0a547a, 0xff07ccf2, 0x00000000, 
//0x00000000, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0x00000000, 
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
//},
//{
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
//0xff000000, 0xff07ccf2, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff07ccf2, 0xff000000, 0x00000000, 
//0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0x00000000, 
//0x00000000, 0x00000000, 0xff07ccf2, 0xff07ccf2, 0x00000000, 0x00000000, 0xff07ccf2, 0xff07ccf2, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0x00000000, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0xff07ccf2, 0xff07ccf2, 0xff000000, 0xff07ccf2, 0xff07ccf2, 0xff000000, 0xff07ccf2, 0xff07ccf2, 0x00000000, 0x00000000, 
//0x00000000, 0xff495ff2, 0xff07ccf2, 0xff000000, 0xff07ccf2, 0xff07ccf2, 0xff000000, 0xff07ccf2, 0xff495ff2, 0x00000000, 0x00000000, 
//0x00000000, 0xff495ff2, 0xff495ff2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff495ff2, 0xff495ff2, 0x00000000, 0x00000000, 
//0x00000000, 0x00000000, 0xff07ccf2, 0xff07ccf2, 0xff000000, 0xff000000, 0xff07ccf2, 0xff07ccf2, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0x00000000, 0x00000000, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0xff07ccf2, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
//}
//};
//
//int sonar_pixel[1][121] = {
//{
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
//0x00000000, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xffa71121, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xffa71121, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xff055c06, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xffa71121, 0xff000000, 0xffa71121, 0xffa71121, 0xffa71121, 0xff000000, 0xffa71121, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xff000000, 0xff000000, 0xff000000, 0xffa71121, 0xff000000, 0xff000000, 0xff000000, 0xffa71121, 0x00000000, 
//0x00000000, 0xffa71121, 0xffa71121, 0xff000000, 0xffa71121, 0xffa71121, 0xffa71121, 0xff000000, 0xffa71121, 0xffa71121, 0x00000000, 
//0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffa71121, 0xffa71121, 0xffa71121, 0x00000000, 0x00000000, 0x00000000, 0x00000000
//};
//
//int lava_pixel[11*11] =
//{
//0xdb6b18, 0xd65b10, 0xdc741f, 0xe28a2c, 0xdc741e, 0xd04e0b, 0xd1510e, 0xd65c12, 0xd76013, 0xdc711c, 0xdf7a21, 
//0xde761f, 0xd86515, 0xd55d11, 0xd25610, 0xd45d12, 0xd35810, 0xd86919, 0xd96d1b, 0xd66115, 0xe49836, 0xe9a53d, 
//0xdc711c, 0xd45b10, 0xd04f0a, 0xcd4708, 0xd66215, 0xd96e1b, 0xd55d12, 0xd2560f, 0xd76718, 0xe59d39, 0xe9a63e, 
//0xd86214, 0xd2540c, 0xd1520b, 0xd66113, 0xdf8227, 0xdd751f, 0xd76214, 0xdb7621, 0xd66415, 0xda6e1a, 0xde7921, 
//0xd75e11, 0xd55c10, 0xd66214, 0xe0892b, 0xe59a37, 0xd66317, 0xd66316, 0xe18c2f, 0xd45e13, 0xd76516, 0xdb6b18, 
//0xda6b19, 0xd86818, 0xd45c11, 0xdf862b, 0xe29131, 0xd45d14, 0xcd4709, 0xd25810, 0xcf4f0d, 0xce4a0a, 0xd4560d, 
//0xe1872a, 0xe1892c, 0xd56216, 0xd1540e, 0xd45c12, 0xcc4409, 0xc93b05, 0xd46117, 0xe0892e, 0xd1530e, 0xd86517, 
//0xde7d24, 0xdf8529, 0xd86e1c, 0xd45d14, 0xcb4108, 0xc83805, 0xcc4407, 0xd96e1d, 0xe08d31, 0xd0510e, 0xd65d11, 
//0xd86618, 0xd45b10, 0xd96a19, 0xe39232, 0xd15510, 0xcc4408, 0xd3580f, 0xd66316, 0xce4b0a, 0xcc4507, 0xd76113, 
//0xe7a13c, 0xdd7d25, 0xd96b19, 0xd66215, 0xcb4208, 0xcd4709, 0xd45a10, 0xd86918, 0xd35a11, 0xd1540d, 0xdf7f25, 
//0xe38c2d, 0xe18428, 0xe18327, 0xd96517, 0xd04c0a, 0xcd4307, 0xd14c0a, 0xd75f12, 0xe07f25, 0xdb6b19, 0xdb6b18
//};







void draw_player(int u, int v, int key)
{
    //uLCD.filled_rectangle(u, v, u+11, v+11, RED);
    
    uLCD.BLIT(u, v, 11, 11, (int*)figure_pixel);//22, 11? 22, 22? 11, 11?
}

#define YELLOW 0xFFFF00
#define BROWN  0xD2691E
#define DIRT   BROWN
#define BLUE 0x0000FF
#define WHITW 0xFFFFFF
#define PINK 0xFF00FF
#define GREEN 0x00FF00
#define CYAN 0x00FF00
void draw_img(int u, int v, const char* img)
{
    int colors[11*11];
    for (int i = 0; i < 11*11; i++)
    {
        if (img[i] == 'R') colors[i] = RED;
        else if (img[i] == 'Y') colors[i] = YELLOW;
        else if (img[i] == 'G') colors[i] = GREEN;
        else if (img[i] == 'D') colors[i] = DIRT;
        else if (img[i] == '5') colors[i] = LGREY;
        else if (img[i] == '3') colors[i] = DGREY;
        else colors[i] = BLACK;
    }
    uLCD.BLIT(u, v, 11, 11, colors);
    wait_us(250); // Recovery time!
}

void draw_nothing(int u, int v)
{
    // Fill a tile with blackness
    uLCD.filled_rectangle(u, v, u+10, v+10, BLACK);
}

void draw_wall(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, BROWN);
}

void draw_plant(int u, int v)
{
    //uLCD.filled_rectangle(u, v, u+10, v+10, GREEN);
    uLCD.BLIT(u, v, 11, 11, (int*)flower_pixel);
}

////////////////**********PRIVATE***********//////////////////
void draw_NPC(int u, int v) {
    //uLCD.filled_rectangle(u, v, u+10, v+10, BLUE);
    
    uLCD.BLIT(u, v, 11, 11, (int*)NPC_pixel);
    
}

void draw_NPC_2(int u, int v) {
    //uLCD.filled_rectangle(u, v, u+10, v+10, WHITE); 
    
    uLCD.BLIT(u, v, 11, 11, (int*)npc_2_pixel);   //?????/22, 11? 22, 22? 11, 11?
}

void draw_door(int u, int v) {
    uLCD.filled_rectangle(u, v, u+10, v+10, PINK);
}

void draw_tree(int u, int v) {
    uLCD.filled_rectangle(u, v, u+21, v+21, GREEN);    
    //uLCD.BLIT(u, v, 11, 11, (int*)tree_pixel); 
}

void draw_sonar(int u, int v) {
    //uLCD.filled_rectangle(u, v, u+10, v+10, CYAN);  
    
    uLCD.BLIT(u, v, 11, 11, (int*)sonar_pixel); 
}

void draw_treasure(int u, int v) {
    //uLCD.filled_rectangle(u, v, u+10, v+10, YELLOW);
    
    uLCD.BLIT(u, v, 11, 11, (int*)treasure_pixel);
}

void cover_treasure(int u, int v) {
    uLCD.filled_rectangle(u, v, u+10, v+10, BLACK);    
}

void draw_end() {
    uLCD.printf("\n Congrat! You Win");
    wait(2.5);
    
    //uLCD.line(0, 118, 127, 118, GREEN);
    
    // Add other status info drawing code here
    //char location[16];
//    sprintf(location, "You win!");
//    uLCD.text_string(location, 1, 9, FONT_5X7, BLUE);


    //uLCD.line(0, 118, 127, 118, GREEN);
//    
//    // Add other status info drawing code here
//    char location[16];
//    sprintf(location, "YOU WIN!!!");
//    uLCD.text_string(location, 1, 15, FONT_5X7, BLUE);
}

//void draw_change_treasure() {
//    char talk[20];
//    sprintf(talk, "It change location");   
//    uLCD.text_string(talk, 1, 9, FONT_5X7, BLUE); 
//    wait(1.5);
//}

void draw_lose() {
    uLCD.printf("\n LOSWER!!");
    wait(2.5);
}

void cover_sonar(int u, int v) {
    uLCD.filled_rectangle(u, v, u+10, v+10, BLACK);    
}

void draw_lava(int u, int  v) {
    uLCD.BLIT(u, v, 11, 11, (int*)lava_pixel);
}

void draw_ice(int u, int v) {
    uLCD.BLIT(u, v, 11, 11, (int*)ice_pixel);
}

void draw_ice_2(int u, int v) {
    uLCD.filled_rectangle(u, v, u+10, v+10, WHITE);    
}

void draw_swamp(int u, int v) {
    uLCD.BLIT(u, v, 11, 11, (int*)swamp_pixel);
}

void draw_piece_1 (int u, int v) {
    uLCD.BLIT(u+20, v-10, 11, 11, (int*)treasure_pixel);
}

void draw_piece_2 (int u, int v) {
    uLCD.BLIT(u-10, v+10, 11, 11, (int*)treasure_pixel);
}

void draw_piece_3 (int u, int v) {
    uLCD.BLIT(u+1, v+2, 12, 11, (int*)treasure_pixel);
}

void draw_NPC_3(int u, int v) {
    uLCD.BLIT(u, v, 11, 11, (int*)girl_pixel);
}





void draw_upper_status(int player_x, int player_y, int player_has_key, int player_health)
{
    // Draw bottom border of status bar
    uLCD.line(0, 9, 127, 9, GREEN);
    
    // Add other status info drawing code here
    //add coordinate tracking here
    
//    char healthbar[15];
//    sprintf(healthbar, "HP:%d ", player_health);
//    uLCD.text_string(healthbar, 0, 0, FONT_5X7, WHITE);
    //_________health done_________//
    
    char coordinates[16];
    //if (player_has_key) {     //has key
//        sprintf(coordinates, "XY: %d, %d, Key: 1", player_x, player_y);    
//    } else {
//        sprintf(coordinates, "XY: %d, %d, Key: 0", player_x, player_y);
//    }
    sprintf(coordinates, "xy:%02d,%02d", player_x, player_y);
    uLCD.text_string(coordinates, 1, 0, FONT_5X7, BLUE);
    
    char healthbar[15];
    sprintf(healthbar, "HP:%d ", player_health);
    uLCD.text_string(healthbar, 10, 0, FONT_5X7, WHITE);
}

void draw_lower_status(int ran_x, int ran_y, int player_x, int player_y, bool player_has_sonar, int player_health, bool sonar_improved)
{
    // Draw top border of status bar
    uLCD.line(0, 118, 127, 118, GREEN);
    
    // Add other status info drawing code here
    char location[16];
    
    if (sonar_improved) {
        sprintf(location, "XY: %02d, %02d", ran_x, ran_y);
        uLCD.text_string(location, 1, 15, FONT_5X7, BLUE);
        
    wait(1.5);
    
        //char healthbar[15];
//        sprintf(healthbar, "HP:%d ", player_health);
//        uLCD.text_string(healthbar, 12, 15, FONT_5X7, WHITE);
    } else {

        if (!player_has_sonar) { 
            //health
            //char healthbar[15];
//            sprintf(healthbar, "HP:%d ", player_health);
//            uLCD.text_string(healthbar, 8, 15, FONT_5X7, WHITE);
        } else {
            char* direction1 = "";
            char* direction2 = "";
    
            if (player_x < ran_x) { //current is on the left---go east
                direction1 = "E";    
            }
            if (player_x > ran_x) {
                direction1 = "W";
            }
            if (player_y < ran_y) { //current is on top --- go down/south
                direction2 = "S";
            }
            if (player_y > ran_y) {
                direction2 = "N";
            }
    
            sprintf(location, "%s %s", direction1, direction2); //or use %c
            uLCD.text_string(location, 2, 15, FONT_5X7, BLUE);
        
            //health
            //char healthbar[15];
//            sprintf(healthbar, "HP:%d ", player_health);
//            uLCD.text_string(healthbar, 8, 15, FONT_5X7, WHITE);
        }//end of else
    }//end else for sonar_improved
    
}

void draw_border()
{
    uLCD.filled_rectangle(0,     9, 127,  14, WHITE); // Top
    uLCD.filled_rectangle(0,    13,   2, 114, WHITE); // Left
    uLCD.filled_rectangle(0,   114, 127, 117, WHITE); // Bottom
    uLCD.filled_rectangle(124,  14, 127, 117, WHITE); // Right
}


